AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  sweet-spots-landingpage
  Sample SAM Template for sweet-spots-landingpage
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    LoggingConfig:
      LogFormat: JSON
  Api:
    Cors:
      AllowMethods: '''POST'''
      AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      AllowOrigin: '''*'''
Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
  UserInfoCollectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: UserInfoCollectFunction
      CodeUri: src/UserInfoCollectFunction
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERINFO_TABLE_NAME: !Ref UserInfoTable
          SES_SOURCE_EMAIL: bharatkatyaltravel@icloud.com
          SES_REGION: us-east-1
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserInfoTable
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
              Resource: '*'
      Events:
        ServerlessRestApiPOSTsubmit:
          Type: Api
          Properties:
            Path: /submit
            Method: POST
  UserInfoCollectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${UserInfoCollectFunction}
  UserInfoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-websitebucket
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${WebsiteBucket}/*
            Principal: '*'
  Function:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Function
      CodeUri: src/Function
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
  FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${Function}
Outputs:
  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  UserCollectFunctionAPI:
    Description: API Gateway endpoint URL for Prod stage for User Collect function
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/submit/
  WebsiteURL:
    Description: URL for website hosted on S3
    Value: !GetAtt WebsiteBucket.WebsiteURL